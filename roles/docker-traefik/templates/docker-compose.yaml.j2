version: '3.9'

networks:
  net:
    name: {{ traefik_network }}
    external: true

configs:
  static_config:
    file: ./traefik.static.toml
  dynamic_config:
    file: ./traefik.dynamic.toml

secrets:
  auth:
    file: ./admin.basic-auth

services:
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      SERVICES: 1
      TASKS: 1
      NETWORKS: 1
    networks:
      - net
    deploy:
      placement:
        constraints:
          - node.role == manager
  server:
    image: "traefik:{{ traefik_version }}"
    volumes:
      - "{{ traefik_cert_dir }}:/certificates"
    configs:
      - source: static_config
        target: /traefik.toml
      - source: dynamic_config
        target: /traefik.dynamic.toml
    secrets:
      - source: auth
        target: /admin.basic-auth
    networks:
      - net
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: udp
        mode: host
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 30s
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M
      labels:
        traefik.enable: "true"
        traefik.http.services.traefik.loadbalancer.server.port: 8080
        traefik.http.routers.traefik.rule: Host(`swarm-admin.{{ root_domain }}`)
        traefik.http.routers.traefik.entrypoints: web-secure
        traefik.http.routers.traefik.tls.certResolver: cloudflare
        traefik.http.routers.traefik.tls: "true"
        traefik.http.routers.traefik.middlewares: basic-auth@file
    ulimits:
      rtprio: 95
      memlock: -1
      nproc: 1024000
      nofile:
        soft: 1024000
        hard: 1024000
    cap_add:
      - NET_ADMIN
      - NET_RAW
    environment:
      CF_API_EMAIL: {{ cf_api_email }}
      CF_API_KEY: {{ cf_api_key }}
      CF_ZONE_API_TOKEN: {{ cf_zone_api_token }}
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://127.0.0.1:8080 || exit 1"
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 10s

  catch-all:
    image: traefik/whoami:v1.8
    networks:
      - net
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: '128M'
      restart_policy:
        condition: on-failure
      labels:
        traefik.enable: "true"
        traefik.http.services.catch-all.loadbalancer.server.port: 80
        ## Secure HTTP catch-all router
        traefik.http.routers.catch-all.entrypoints: web-secure
        traefik.http.routers.catch-all.rule: HostRegexp(`{host:.+}`) #|| Host(`11s.cx`) || HostRegexp(`^.+\.11s\.cx$$`)
        traefik.http.routers.catch-all.tls.certResolver: cloudflare
        traefik.http.routers.catch-all.priority: 1
        traefik.http.routers.catch-all.service: catch-all
        traefik.http.routers.catch-all.tls.domains[0].main: "{{ root_domain }}"
        traefik.http.routers.catch-all.tls.domains[0].sans: "*.{{ root_domain }}"
        ## Match requests with Host set to either example.com or example.org
        ## HostRegexp(`^example\.(com|org)$`)
        ## Match requests sent to any subdomain of example.com
        ## HostRegexp(`^.+\.example\.com$`)
